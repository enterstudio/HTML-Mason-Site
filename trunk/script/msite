#!perl

use strict;
use warnings;

use Getopt::Long::Descriptive;
use HTML::Mason::Site;
use HTML::Mason::Site::Server;
use File::Temp qw(tempdir);
use File::Spec;
use Sys::Hostname::Long;

my ($opt, $usage) = describe_options(
  "%c %o <site>",
  [],
  [ "<site> may be either an HTML::Mason::Site subclass," ],
  [ "or a path to a <sitename>.yml file." ],
  [],
  [ 'port|p=i', 'port number to listen on (defaults to 8100)',
    { default => 8100 },
  ],
  [ 'tmp-data|T!' => 'use temporary data directory for mason (default: true)',
    { default => 1 },
  ],
  [ 'local-cookie-domain|D!' => 'use local hostname for session cookie_domain',
    { default => 1 },
  ],
  [ 'mason-config|M=s' => 'optional YAML overriding mason ("handler") config',
    { default => '{}' },
  ],
  [ 'comp-root|C=s' =>
      'shortcut for setting the comp_root; overrides --mason-config' ],
);

my $site;
{
  $site = shift @ARGV or last;
  if ($site =~ /\.yml$/ && -f $site) {
    $site = HTML::Mason::Site->new({
      config => $site,
    });
  } elsif ($site =~ /^(?:\w+::)*[a-zA-Z_]\w*$/) {
    eval "require $site";
    die $@ if $@;
    $site = $site->new;
  }
}
$usage->die unless eval { $site->isa("HTML::Mason::Site") };

if ($opt->{tmp_data}) {
  my $dir = tempdir("/tmp/mason-data-XXXXXXXX", CLEANUP => 1);
  $site->mason_config({ data_dir => $dir });
}

if ($opt->{mason_config}) {
  $site->mason_config(YAML::Syck::Load($opt->{mason_config}));
}
if ($opt->{comp_root}) {
  $site->mason_config({
    comp_root => File::Spec->rel2abs($opt->{comp_root}),
  });
}
if ($opt->{local_cookie_domain}) {
  $site->mason_config({ session_cookie_domain => hostname_long });
}

my $server = HTML::Mason::Site::Server->new($opt->{port});

$server->site($site);

$site->require_modules;

$server->run;
